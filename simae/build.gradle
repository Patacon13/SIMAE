import java.nio.file.Files
import java.nio.file.StandardCopyOption
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.openjfx.javafxplugin' version "0.0.10"
    id 'application'
    id 'java'
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id 'com.github.node-gradle.node' version '3.0.0'
}

version = "0.2.2"


node {
    version = '18.14.2' // Versión de Node.js
    npmVersion = '9.5.0' // Versión de NPM
    download = true
}


compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


def javaFxVersion = 11

dependencies {

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'

    implementation project(':simae-languages')
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

application {
    mainClass = 'CommandLineInterface'
}

task crearJarAPI(type: Jar) {
    duplicatesStrategy = 'exclude'
    archiveClassifier.set('simaeAPI')
    from sourceSets.main.output //agrega archivos compilados
    exclude('**/javafx/**/*.class', '**/picocli/**/*.class', '**/javax**/*.class', '**/**/*.dll', '**/**/*.so', '**/**/*.dylib')
    manifest {
        attributes 'Main-Class': 'simae.api.API'
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } // agrega dependencias locales y dependencias externas
    }

    doLast {
        def jarFile = project.file('build/libs/simae-0.2.2-simaeAPI.jar')
        def newFile = project.file('../simae-plugins/vs-code/src/libs/resources/simae.jar')
        Files.move(jarFile.toPath(), newFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
    }

}


task construirPlugin(type: Exec) {
    dependsOn crearJarAPI
    workingDir '../simae-plugins/vs-code/src'
    String npm = 'npm';
    String osName = System.getProperty('os.name').toLowerCase()
    if (osName.contains('windows')) {
        npm = 'npm.cmd';
    }
    commandLine npm, 'run', 'vsce:package'
}




shadowJar {
    classifier = null
}

build {
    dependsOn shadowJar
    dependsOn construirPlugin
}